"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2018 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
const espree = require("espree");
const babel = require("babel-eslint");
const eslint_1 = require("eslint");
const PARSER_CONFIG = {
    tokens: true,
    comment: true,
    loc: true,
    range: true,
    ecmaVersion: 2018,
    sourceType: "module",
    codeFrame: false,
    ecmaFeatures: {
        jsx: true,
        globalReturn: true,
    },
};
const PARSER_CONFIG_NOT_STRICT = Object.assign({}, PARSER_CONFIG, { sourceType: "script" });
function parseSourceFile(fileContent, fileUri) {
    let parse = espree.parse;
    let parser = "espree";
    if (fileContent.includes("@flow")) {
        parse = babel.parse;
        parser = "babel-eslint";
    }
    try {
        return parseSourceFileAsModule(parse, fileContent);
    }
    catch (exceptionAsModule) {
        try {
            return parseSourceFileAsScript(parse, fileContent);
        }
        catch (exceptionAsScript) {
            console.error(message(fileUri, "module", exceptionAsModule, parser));
            console.log(message(fileUri, "script", exceptionAsScript, parser, true));
        }
    }
}
exports.parseSourceFile = parseSourceFile;
function message(fileUri, mode, exception, parser, debug = false) {
    return `${debug ? "DEBUG " : ""}Failed to parse file [${fileUri}] at line ${exception.lineNumber}: ${exception.message} (with ${parser} parser in ${mode} mode)`;
}
function parseSourceFileAsScript(parse, fileContent) {
    const ast = parse(fileContent, PARSER_CONFIG_NOT_STRICT);
    return new eslint_1.SourceCode(fileContent, ast);
}
exports.parseSourceFileAsScript = parseSourceFileAsScript;
function parseSourceFileAsModule(parse, fileContent) {
    const ast = parse(fileContent, PARSER_CONFIG);
    return new eslint_1.SourceCode(fileContent, ast);
}
exports.parseSourceFileAsModule = parseSourceFileAsModule;
//# sourceMappingURL=parser.js.map