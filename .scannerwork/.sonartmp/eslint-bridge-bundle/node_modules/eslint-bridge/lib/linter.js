"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2018 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
const eslint_plugin_sonarjs_1 = require("eslint-plugin-sonarjs");
const eslint_1 = require("eslint");
const linter = new eslint_1.Linter();
linter.defineRules(eslint_plugin_sonarjs_1.rules);
function analyze(sourceCode, rules, fileUri) {
    return linter
        .verify(sourceCode, createLinterConfig(rules), fileUri)
        .map(removeIrrelevantProperties)
        .filter(issue => issue !== null);
}
exports.analyze = analyze;
function removeIrrelevantProperties(eslintIssue) {
    // ruleId equals 'null' for parsing error,
    // but it should not happen because we lint ready AST and not file content
    if (!eslintIssue.ruleId) {
        console.error("Illegal 'null' ruleId for eslint issue");
        return null;
    }
    const { nodeType, severity, fatal, fix, source } = eslintIssue, relevantProperties = __rest(eslintIssue, ["nodeType", "severity", "fatal", "fix", "source"]);
    return relevantProperties;
}
function createLinterConfig(rules) {
    const ruleConfig = { rules: {}, parserOptions: { sourceType: "module" } };
    rules.forEach(rule => {
        ruleConfig.rules[rule.key] = ["error", ...rule.configurations];
    });
    return ruleConfig;
}
//# sourceMappingURL=linter.js.map