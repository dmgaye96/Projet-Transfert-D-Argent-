"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns a location of the "main" function token:
 * - function name for a function declaration, method or accessor
 * - "function" keyword for a function expression
 * - "=>" for an arrow function
 */
function getMainFunctionTokenLocation(fn, parent, context) {
    var location;
    if (fn.type === "FunctionDeclaration") {
        // `fn.id` can be null when it is `export default function` (despite of the @types/estree definition)
        if (fn.id) {
            location = fn.id.loc;
        }
        else {
            var token = getTokenByValue(fn, "function", context);
            location = token && token.loc;
        }
    }
    else if (fn.type === "FunctionExpression") {
        if (parent && (parent.type === "MethodDefinition" || parent.type === "Property")) {
            location = parent.key.loc;
        }
        else {
            var token = getTokenByValue(fn, "function", context);
            location = token && token.loc;
        }
    }
    else if (fn.type === "ArrowFunctionExpression") {
        var token = context
            .getSourceCode()
            .getTokensBefore(fn.body)
            .reverse()
            .find(function (token) { return token.value === "=>"; });
        location = token && token.loc;
    }
    return location;
}
exports.getMainFunctionTokenLocation = getMainFunctionTokenLocation;
function getTokenByValue(node, value, context) {
    return context
        .getSourceCode()
        .getTokens(node)
        .find(function (token) { return token.value === value; });
}
//# sourceMappingURL=locations.js.map