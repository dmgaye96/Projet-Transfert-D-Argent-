"use strict";
/*
 * eslint-plugin-sonarjs
 * Copyright (C) 2018 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
// https://jira.sonarsource.com/browse/RSPEC-1871
var nodes_1 = require("../utils/nodes");
var equivalence_1 = require("../utils/equivalence");
var conditions_1 = require("../utils/conditions");
var MESSAGE = "This {{type}}'s code block is the same as the block for the {{type}} on line {{line}}.";
var rule = {
    create: function (context) {
        return {
            IfStatement: function (node) {
                visitIfStatement(node);
            },
            SwitchStatement: function (node) {
                visitSwitchStatement(node);
            },
        };
        function visitIfStatement(ifStmt) {
            var parent = nodes_1.getParent(context);
            if (!nodes_1.isIfStatement(parent)) {
                var branches = conditions_1.collectIfBranches(ifStmt).branches;
                for (var i = 1; i < branches.length; i++) {
                    if (hasRequiredSize([branches[i]])) {
                        for (var j = 0; j < i; j++) {
                            if (compareIfBranches(branches[i], branches[j])) {
                                break;
                            }
                        }
                    }
                }
            }
        }
        function visitSwitchStatement(_a) {
            var cases = _a.cases;
            for (var i = 1; i < cases.length; i++) {
                var firstClauseWithoutBreak = conditions_1.takeWithoutBreak(expandSingleBlockStatement(cases[i].consequent));
                if (hasRequiredSize(firstClauseWithoutBreak)) {
                    for (var j = 0; j < i; j++) {
                        var secondClauseWithoutBreak = conditions_1.takeWithoutBreak(expandSingleBlockStatement(cases[j].consequent));
                        if (equivalence_1.areEquivalent(firstClauseWithoutBreak, secondClauseWithoutBreak, context.getSourceCode())) {
                            context.report({
                                message: MESSAGE,
                                data: {
                                    type: "case",
                                    line: String(cases[j].loc.start.line),
                                },
                                node: cases[i],
                            });
                            break;
                        }
                    }
                }
            }
        }
        function hasRequiredSize(nodes) {
            if (nodes.length > 0) {
                var tokens = context.getSourceCode().getTokens(nodes[0]).concat(context.getSourceCode().getTokens(nodes[nodes.length - 1])).filter(function (token) { return token.value !== "{" && token.value !== "}"; });
                return tokens.length > 0 && tokens[tokens.length - 1].loc.end.line > tokens[0].loc.start.line;
            }
            return false;
        }
        function compareIfBranches(a, b) {
            var equivalent = equivalence_1.areEquivalent(a, b, context.getSourceCode());
            if (equivalent && b.loc) {
                context.report({
                    message: MESSAGE,
                    data: {
                        type: "branch",
                        line: String(b.loc.start.line),
                    },
                    node: a,
                });
            }
            return equivalent;
        }
        function expandSingleBlockStatement(nodes) {
            if (nodes.length === 1) {
                var node = nodes[0];
                if (nodes_1.isBlockStatement(node)) {
                    return node.body;
                }
            }
            return nodes;
        }
    },
};
module.exports = rule;
//# sourceMappingURL=no-duplicated-branches.js.map